package com.hrapp.controller;

import com.hrapp.entity.Role;
import com.hrapp.service.RoleService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

/**
 * üé≠ Role Controller - Rol Y√∂netimi API'larƒ±
 * 
 * Rol CRUD i≈ülemleri, izin atamalarƒ±
 * Sadece Admin yetkileri
 */
@RestController
@RequestMapping("/roles")
@RequiredArgsConstructor
@Slf4j
public class RoleController {

    private final RoleService roleService;

    /**
     * üìã T√ºm rolleri getir
     * 
     * GET /roles
     */
    @GetMapping
    public ResponseEntity<Map<String, Object>> getAllRoles() {
        log.debug("T√ºm roller isteniyor");
        
        try {
            List<Role> roles = roleService.findAll();
            
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("message", "Roller ba≈üarƒ±yla getirildi");
            response.put("data", roles.stream()
                    .map(this::createRoleResponse).toList());
            response.put("count", roles.size());
            
            return ResponseEntity.ok(response);
            
        } catch (Exception e) {
            log.error("Rol listesi getirme hatasƒ±: {}", e.getMessage());
            
            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("success", false);
            errorResponse.put("message", "Roller getirilirken hata olu≈ütu");
            
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errorResponse);
        }
    }

    /**
     * ‚úÖ Aktif rolleri getir
     * 
     * GET /roles/active
     */
    @GetMapping("/active")
    public ResponseEntity<Map<String, Object>> getActiveRoles() {
        log.debug("Aktif roller isteniyor");
        
        try {
            List<Role> roles = roleService.findActiveRoles();
            
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("message", "Aktif roller ba≈üarƒ±yla getirildi");
            response.put("data", roles.stream()
                    .map(this::createRoleResponse).toList());
            response.put("count", roles.size());
            
            return ResponseEntity.ok(response);
            
        } catch (Exception e) {
            log.error("Aktif rol listesi getirme hatasƒ±: {}", e.getMessage());
            
            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("success", false);
            errorResponse.put("message", "Aktif roller getirilirken hata olu≈ütu");
            
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errorResponse);
        }
    }

    /**
     * üåê Global rolleri getir
     * 
     * GET /roles/global
     */
    @GetMapping("/global")
    public ResponseEntity<Map<String, Object>> getGlobalRoles() {
        log.debug("Global roller isteniyor");
        
        try {
            List<Role> roles = roleService.findGlobalRoles();
            
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("message", "Global roller ba≈üarƒ±yla getirildi");
            response.put("data", roles.stream()
                    .map(this::createRoleResponse).toList());
            response.put("count", roles.size());
            
            return ResponseEntity.ok(response);
            
        } catch (Exception e) {
            log.error("Global rol listesi getirme hatasƒ±: {}", e.getMessage());
            
            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("success", false);
            errorResponse.put("message", "Global roller getirilirken hata olu≈ütu");
            
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errorResponse);
        }
    }

    /**
     * üÜî ID ile rol getir
     * 
     * GET /roles/{id}
     */
    @GetMapping("/{id}")
    public ResponseEntity<Map<String, Object>> getRoleById(@PathVariable Long id) {
        log.debug("Rol isteniyor - ID: {}", id);
        
        try {
            Optional<Role> roleOpt = roleService.findById(id);
            
            if (roleOpt.isEmpty()) {
                Map<String, Object> errorResponse = new HashMap<>();
                errorResponse.put("success", false);
                errorResponse.put("message", "Rol bulunamadƒ±");
                
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(errorResponse);
            }
            
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("message", "Rol ba≈üarƒ±yla getirildi");
            response.put("data", createRoleResponse(roleOpt.get()));
            
            return ResponseEntity.ok(response);
            
        } catch (Exception e) {
            log.error("Rol getirme hatasƒ± - ID: {}, Hata: {}", id, e.getMessage());
            
            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("success", false);
            errorResponse.put("message", "Rol getirilirken hata olu≈ütu");
            
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errorResponse);
        }
    }

    /**
     * üìù Yeni rol olu≈ütur
     * 
     * POST /roles
     * Body: {"name": "NEW_ROLE", "description": "Yeni rol a√ßƒ±klamasƒ±"}
     */
    @PostMapping
    public ResponseEntity<Map<String, Object>> createRole(@RequestBody CreateRoleRequest request) {
        log.info("Yeni rol olu≈üturuluyor - ƒ∞sim: {}", request.getName());
        
        try {
            // Role entity olu≈ütur
            Role role = new Role();
            role.setName(request.getName());
            role.setDescription(request.getDescription());
            // Tenant bilgisi ≈üimdilik null (global rol)
            
            Role savedRole = roleService.createRole(role);
            
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("message", "Rol ba≈üarƒ±yla olu≈üturuldu");
            response.put("data", createRoleResponse(savedRole));
            
            return ResponseEntity.status(HttpStatus.CREATED).body(response);
            
        } catch (RuntimeException e) {
            log.warn("Rol olu≈üturma hatasƒ± - ƒ∞sim: {}, Hata: {}", request.getName(), e.getMessage());
            
            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("success", false);
            errorResponse.put("message", e.getMessage());
            
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errorResponse);
            
        } catch (Exception e) {
            log.error("Rol olu≈üturma hatasƒ± - ƒ∞sim: {}, Hata: {}", request.getName(), e.getMessage());
            
            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("success", false);
            errorResponse.put("message", "Rol olu≈üturulurken hata olu≈ütu");
            
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errorResponse);
        }
    }

    /**
     * üîÑ Rol g√ºncelle
     * 
     * PUT /roles/{id}
     * Body: {"description": "G√ºncellenmi≈ü a√ßƒ±klama"}
     */
    @PutMapping("/{id}")
    public ResponseEntity<Map<String, Object>> updateRole(@PathVariable Long id, 
                                                          @RequestBody UpdateRoleRequest request) {
        log.info("Rol g√ºncelleniyor - ID: {}", id);
        
        try {
            // Role entity olu≈ütur
            Role roleDetails = new Role();
            roleDetails.setDescription(request.getDescription());
            
            Role updatedRole = roleService.updateRole(id, roleDetails);
            
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("message", "Rol ba≈üarƒ±yla g√ºncellendi");
            response.put("data", createRoleResponse(updatedRole));
            
            return ResponseEntity.ok(response);
            
        } catch (RuntimeException e) {
            log.warn("Rol g√ºncelleme hatasƒ± - ID: {}, Hata: {}", id, e.getMessage());
            
            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("success", false);
            errorResponse.put("message", e.getMessage());
            
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errorResponse);
            
        } catch (Exception e) {
            log.error("Rol g√ºncelleme hatasƒ± - ID: {}, Hata: {}", id, e.getMessage());
            
            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("success", false);
            errorResponse.put("message", "Rol g√ºncellenirken hata olu≈ütu");
            
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errorResponse);
        }
    }

    /**
     * üîë Role izin ekle
     * 
     * POST /roles/{id}/permissions/{permissionName}
     */
    @PostMapping("/{id}/permissions/{permissionName}")
    public ResponseEntity<Map<String, Object>> addPermissionToRole(@PathVariable Long id, 
                                                                   @PathVariable String permissionName) {
        log.info("Role izin ekleniyor - Role ID: {}, ƒ∞zin: {}", id, permissionName);
        
        try {
            Role updatedRole = roleService.addPermissionToRole(id, permissionName);
            
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("message", "ƒ∞zin ba≈üarƒ±yla eklendi");
            response.put("data", createRoleResponse(updatedRole));
            
            return ResponseEntity.ok(response);
            
        } catch (RuntimeException e) {
            log.warn("ƒ∞zin ekleme hatasƒ± - Role ID: {}, ƒ∞zin: {}, Hata: {}", id, permissionName, e.getMessage());
            
            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("success", false);
            errorResponse.put("message", e.getMessage());
            
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errorResponse);
            
        } catch (Exception e) {
            log.error("ƒ∞zin ekleme hatasƒ± - Role ID: {}, ƒ∞zin: {}, Hata: {}", id, permissionName, e.getMessage());
            
            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("success", false);
            errorResponse.put("message", "ƒ∞zin eklenirken hata olu≈ütu");
            
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errorResponse);
        }
    }

    /**
     * üîë Rolden izin kaldƒ±r
     * 
     * DELETE /roles/{id}/permissions/{permissionName}
     */
    @DeleteMapping("/{id}/permissions/{permissionName}")
    public ResponseEntity<Map<String, Object>> removePermissionFromRole(@PathVariable Long id, 
                                                                        @PathVariable String permissionName) {
        log.info("Rolden izin kaldƒ±rƒ±lƒ±yor - Role ID: {}, ƒ∞zin: {}", id, permissionName);
        
        try {
            Role updatedRole = roleService.removePermissionFromRole(id, permissionName);
            
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("message", "ƒ∞zin ba≈üarƒ±yla kaldƒ±rƒ±ldƒ±");
            response.put("data", createRoleResponse(updatedRole));
            
            return ResponseEntity.ok(response);
            
        } catch (RuntimeException e) {
            log.warn("ƒ∞zin kaldƒ±rma hatasƒ± - Role ID: {}, ƒ∞zin: {}, Hata: {}", id, permissionName, e.getMessage());
            
            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("success", false);
            errorResponse.put("message", e.getMessage());
            
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errorResponse);
            
        } catch (Exception e) {
            log.error("ƒ∞zin kaldƒ±rma hatasƒ± - Role ID: {}, ƒ∞zin: {}, Hata: {}", id, permissionName, e.getMessage());
            
            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("success", false);
            errorResponse.put("message", "ƒ∞zin kaldƒ±rƒ±lƒ±rken hata olu≈ütu");
            
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errorResponse);
        }
    }

    /**
     * ‚úÖ Rol durumunu deƒüi≈ütir (aktif/pasif)
     * 
     * PATCH /roles/{id}/toggle-status
     */
    @PatchMapping("/{id}/toggle-status")
    public ResponseEntity<Map<String, Object>> toggleRoleStatus(@PathVariable Long id) {
        log.info("Rol durumu deƒüi≈ütiriliyor - ID: {}", id);
        
        try {
            Role updatedRole = roleService.toggleRoleStatus(id);
            
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("message", "Rol durumu ba≈üarƒ±yla deƒüi≈ütirildi");
            response.put("data", createRoleResponse(updatedRole));
            
            return ResponseEntity.ok(response);
            
        } catch (RuntimeException e) {
            log.warn("Rol durum deƒüi≈ütirme hatasƒ± - ID: {}, Hata: {}", id, e.getMessage());
            
            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("success", false);
            errorResponse.put("message", e.getMessage());
            
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errorResponse);
            
        } catch (Exception e) {
            log.error("Rol durum deƒüi≈ütirme hatasƒ± - ID: {}, Hata: {}", id, e.getMessage());
            
            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("success", false);
            errorResponse.put("message", "Rol durumu deƒüi≈ütirilirken hata olu≈ütu");
            
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errorResponse);
        }
    }

    /**
     * üóëÔ∏è Rol sil
     * 
     * DELETE /roles/{id}
     */
    @DeleteMapping("/{id}")
    public ResponseEntity<Map<String, Object>> deleteRole(@PathVariable Long id) {
        log.info("Rol siliniyor - ID: {}", id);
        
        try {
            roleService.deleteRole(id);
            
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("message", "Rol ba≈üarƒ±yla silindi");
            
            return ResponseEntity.ok(response);
            
        } catch (RuntimeException e) {
            log.warn("Rol silme hatasƒ± - ID: {}, Hata: {}", id, e.getMessage());
            
            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("success", false);
            errorResponse.put("message", e.getMessage());
            
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errorResponse);
            
        } catch (Exception e) {
            log.error("Rol silme hatasƒ± - ID: {}, Hata: {}", id, e.getMessage());
            
            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("success", false);
            errorResponse.put("message", "Rol silinirken hata olu≈ütu");
            
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errorResponse);
        }
    }

    // ===============================
    // üõ†Ô∏è Helper Methods
    // ===============================

    /**
     * üé≠ Role response objesi olu≈ütur
     */
    private Map<String, Object> createRoleResponse(Role role) {
        Map<String, Object> roleResponse = new HashMap<>();
        roleResponse.put("id", role.getId());
        roleResponse.put("name", role.getName());
        roleResponse.put("description", role.getDescription());
        roleResponse.put("active", role.getActive());
        roleResponse.put("isSystemRole", role.getIsSystemRole());
        roleResponse.put("isGlobal", role.isGlobalRole());
        roleResponse.put("createdAt", role.getCreatedAt());
        
        // ƒ∞zinler
        roleResponse.put("permissions", role.getPermissions().stream()
                .map(permission -> Map.of(
                        "id", permission.getId(),
                        "name", permission.getName(),
                        "description", permission.getDescription(),
                        "resource", permission.getResource(),
                        "action", permission.getAction()
                )).toList());
        
        // Tenant bilgisi (eƒüer varsa)
        if (role.getTenant() != null) {
            roleResponse.put("tenant", Map.of(
                    "id", role.getTenant().getId(),
                    "name", role.getTenant().getName()
            ));
        }
        
        return roleResponse;
    }

    // ===============================
    // üìÑ Request DTOs
    // ===============================

    public static class CreateRoleRequest {
        private String name;
        private String description;
        
        // Getters & Setters
        public String getName() { return name; }
        public void setName(String name) { this.name = name; }
        public String getDescription() { return description; }
        public void setDescription(String description) { this.description = description; }
    }

    public static class UpdateRoleRequest {
        private String description;
        
        // Getters & Setters
        public String getDescription() { return description; }
        public void setDescription(String description) { this.description = description; }
    }
} 